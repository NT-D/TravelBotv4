<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptButtonTitle" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="AcceptRejectConnectionHint" xml:space="preserve">
    <value>Accept or reject the request: Type "{0}" to accept, "{1}" to reject or use the buttons if enabled</value>
  </data>
  <data name="AddAggregationChannelCommandHint" xml:space="preserve">
    <value>To set up an aggregation channel, type "{0}"</value>
  </data>
  <data name="AggregationChannelAlreadySet" xml:space="preserve">
    <value>This channel/conversation is already receiving requests</value>
  </data>
  <data name="AggregationChannelRemoved" xml:space="preserve">
    <value>This channel/conversation will no longer receive requests</value>
  </data>
  <data name="AggregationChannelSet" xml:space="preserve">
    <value>This channel/conversation is now where the requests are aggregated</value>
  </data>
  <data name="AlreadyConnectedWithUser" xml:space="preserve">
    <value>You are already connected with user "{0}"</value>
  </data>
  <data name="CommandMenuDescription" xml:space="preserve">
    <value>Administrative options for controlling the end user bot conversations</value>
  </data>
  <data name="CommandMenuInstructions" xml:space="preserve">
    <value>Select the command using the buttons below or type the command keyword ("{0}")/bot handle ("@{1}") followed by the command and its parameters (if any), for example: "{2}".</value>
  </data>
  <data name="CommandMenuTitle" xml:space="preserve">
    <value>Commands</value>
  </data>
  <data name="CommandNotRecognized" xml:space="preserve">
    <value>Command "{0}" not recognized</value>
  </data>
  <data name="ConnectionRequestMadeButRequestorIsNull" xml:space="preserve">
    <value>A connection request was made, but the requestor party is null</value>
  </data>
  <data name="ConnectionRequestResponseNotAllowed" xml:space="preserve">
    <value>Sorry, you are not allowed to accept or reject requests</value>
  </data>
  <data name="ConnectionRequestTitle" xml:space="preserve">
    <value>Assistance request</value>
  </data>
  <data name="ConnectRequestCommandHint" xml:space="preserve">
    <value>To initiate a conversation with an agent, type "{0}"</value>
  </data>
  <data name="DeletingAllData" xml:space="preserve">
    <value>Deleting all data...</value>
  </data>
  <data name="DeletingAllDataWithCommandIssuer" xml:space="preserve">
    <value>Deleting all data as requested by "0"...</value>
  </data>
  <data name="EchoMessage" xml:space="preserve">
    <value>You said: {0}</value>
  </data>
  <data name="ErrorOccured" xml:space="preserve">
    <value>An error occured</value>
  </data>
  <data name="ErrorOccuredWithResult" xml:space="preserve">
    <value>An error occured (result: {0})</value>
  </data>
  <data name="FailedToFindBotOnAggregationChannel" xml:space="preserve">
    <value>Failed to find the bot party on aggregation channel "{0}"</value>
  </data>
  <data name="FailedToFindPendingRequestForUserWithErrorMessage" xml:space="preserve">
    <value>Failed to find a pending request for user "0": {1}</value>
  </data>
  <data name="FailedToForwardMessage" xml:space="preserve">
    <value>Failed to forward the message</value>
  </data>
  <data name="FailedToRemoveAggregationChannel" xml:space="preserve">
    <value>Failed to remove aggregation channel</value>
  </data>
  <data name="NoAgentsAvailable" xml:space="preserve">
    <value>Sorry, there are no agents available right now</value>
  </data>
  <data name="NoAggregationChannel" xml:space="preserve">
    <value>No aggregation channel set up</value>
  </data>
  <data name="NoPendingRequests" xml:space="preserve">
    <value>No pending requests</value>
  </data>
  <data name="NotifyClientConnected" xml:space="preserve">
    <value>Your request was accepted and you are now chatting with {0}</value>
  </data>
  <data name="NotifyClientDisconnected" xml:space="preserve">
    <value>Your conversation with {0} has ended</value>
  </data>
  <data name="NotifyClientDuplicateRequest" xml:space="preserve">
    <value>Your request has already been received, please wait for an agent to respond</value>
  </data>
  <data name="NotifyClientRequestRejected" xml:space="preserve">
    <value>Unfortunately your request could not be processed</value>
  </data>
  <data name="NotifyClientWaitForRequestHandling" xml:space="preserve">
    <value>Please wait for your request to be accepted</value>
  </data>
  <data name="NotifyOwnerConnected" xml:space="preserve">
    <value>You are now connected to user "{0}"</value>
  </data>
  <data name="NotifyOwnerDisconnected" xml:space="preserve">
    <value>You are now disconnected from the conversation with user "{0}"</value>
  </data>
  <data name="NotifyOwnerRequestRejected" xml:space="preserve">
    <value>Request from user "{0}" rejected</value>
  </data>
  <data name="OptionsCommandHint" xml:space="preserve">
    <value>To see the available commands, type "{0}"</value>
  </data>
  <data name="PartyRemoved" xml:space="preserve">
    <value>Party "{0}" removed</value>
  </data>
  <data name="RejectButtonTitle" xml:space="preserve">
    <value>Reject</value>
  </data>
  <data name="RequestorDetailsTitle" xml:space="preserve">
    <value>Requested by user "{0}" on channel "{1}"</value>
  </data>
  <data name="UserDataDeleted" xml:space="preserve">
    <value>Data of user "{0}" deleted</value>
  </data>
  <data name="UserNameMissing" xml:space="preserve">
    <value>User name missing</value>
  </data>
  <data name="AcceptConnectionRequestsCardInstructions" xml:space="preserve">
    <value>Choose the user whose request to accept</value>
  </data>
  <data name="AcceptConnectionRequestsCardTitle" xml:space="preserve">
    <value>Accept request</value>
  </data>
  <data name="ApplyToAll" xml:space="preserve">
    <value>Apply to all</value>
  </data>
  <data name="Bots" xml:space="preserve">
    <value>Bots</value>
  </data>
  <data name="FailedToFindPendingRequest" xml:space="preserve">
    <value>Failed to find the pending request</value>
  </data>
  <data name="FailedToRejectPendingRequests" xml:space="preserve">
    <value>Failed to reject pending requests</value>
  </data>
  <data name="InvalidCommand" xml:space="preserve">
    <value>Invalid command</value>
  </data>
  <data name="InvalidOrMissingCommandParameter" xml:space="preserve">
    <value>Command parameter invalid or missing</value>
  </data>
  <data name="NoBotsStored" xml:space="preserve">
    <value>No bots stored</value>
  </data>
  <data name="NoConversations" xml:space="preserve">
    <value>No conversations</value>
  </data>
  <data name="NoResults" xml:space="preserve">
    <value>No results</value>
  </data>
  <data name="NoUsersStored" xml:space="preserve">
    <value>No users stored</value>
  </data>
  <data name="PendingRequestsFoundWithCount" xml:space="preserve">
    <value>{0} pending request(s) found</value>
  </data>
  <data name="RejectAll" xml:space="preserve">
    <value>Reject all</value>
  </data>
  <data name="RejectConnectionRequestCardTitle" xml:space="preserve">
    <value>Reject request</value>
  </data>
  <data name="RejectConnectionRequestsCardInstructions" xml:space="preserve">
    <value>Choose the user whose request to reject</value>
  </data>
  <data name="RequestorDetailsItem" xml:space="preserve">
    <value>"{0}" on channel "{1}" ({2})</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="RequestorDetailsMissing" xml:space="preserve">
    <value>Request was made, but the details of the requestor party are missing</value>
  </data>
</root>